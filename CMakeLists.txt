# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
	if(NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)
		set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
	endif()

endif()

project(RCT2RideGen
	LANGUAGES
		CXX
)

    find_package(ZLIB REQUIRED)
    find_package(PNG REQUIRED)
    find_package(embree 3 CONFIG REQUIRED)
    find_package(assimp CONFIG REQUIRED)
    find_package(jansson CONFIG REQUIRED)
    find_package(libzip CONFIG REQUIRED)

# Target: IsoRender
set(IsoRender_SOURCES
	cmake.toml
	"libIsoRender/src/color.h"
	"libIsoRender/src/image.cpp"
	"libIsoRender/src/image.h"
	"libIsoRender/src/model.cpp"
	"libIsoRender/src/model.h"
	"libIsoRender/src/pack.cpp"
	"libIsoRender/src/palette.cpp"
	"libIsoRender/src/palette.h"
	"libIsoRender/src/raytrace.cpp"
	"libIsoRender/src/raytrace.h"
	"libIsoRender/src/renderer.cpp"
	"libIsoRender/src/renderer.h"
	"libIsoRender/src/vectormath.cpp"
	"libIsoRender/src/vectormath.h"
)

add_library(IsoRender STATIC)

target_sources(IsoRender PRIVATE ${IsoRender_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${IsoRender_SOURCES})

target_compile_features(IsoRender PUBLIC
	cxx_std_20
)

target_include_directories(IsoRender PUBLIC
	"libIsoRender/src"
)

target_link_libraries(IsoRender PUBLIC
	PNG::PNG
	ZLIB::ZLIB
	embree
	jansson::jansson
	assimp::assimp
)

# Target: TestIsoRender
set(TestIsoRender_SOURCES
	cmake.toml
	"libIsoRender/src/main.cpp"
)

add_executable(TestIsoRender)

target_sources(TestIsoRender PRIVATE ${TestIsoRender_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${TestIsoRender_SOURCES})

target_compile_features(TestIsoRender PRIVATE
	cxx_std_20
)

target_link_libraries(TestIsoRender PRIVATE
	IsoRender
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT TestIsoRender)
endif()

# Target: makevehicle
set(makevehicle_SOURCES
	"RCT2RideGen/src/main.cpp"
	"RCT2RideGen/src/project.cpp"
	cmake.toml
)

add_executable(makevehicle)

target_sources(makevehicle PRIVATE ${makevehicle_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${makevehicle_SOURCES})

target_compile_features(makevehicle PRIVATE
	cxx_std_20
)

target_link_libraries(makevehicle PRIVATE
	IsoRender
	libzip::zip
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT makevehicle)
endif()

set(CMKR_TARGET makevehicle)
add_custom_command(TARGET makevehicle PRE_BUILD
                   COMMAND ${CMAKE_COMMAND} -E copy_directory
                   ${CMAKE_SOURCE_DIR}/examples $<TARGET_FILE_DIR:makevehicle>/examples)

# Target: maketrack
set(maketrack_SOURCES
	"TrackRender/src/main.cpp"
	"TrackRender/src/sprites.cpp"
	"TrackRender/src/sprites.h"
	"TrackRender/src/track.cpp"
	"TrackRender/src/track.h"
	"TrackRender/src/track_sections.cpp"
	cmake.toml
)

add_executable(maketrack)

target_sources(maketrack PRIVATE ${maketrack_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${maketrack_SOURCES})

target_compile_features(maketrack PRIVATE
	cxx_std_20
)

target_link_libraries(maketrack PRIVATE
	IsoRender
	libzip::zip
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT maketrack)
endif()

# Target: subposition
set(subposition_SOURCES
	"TrackRender/src/sprites.h"
	"TrackRender/src/subposition.cpp"
	"TrackRender/src/track.h"
	"TrackRender/src/track_sections.cpp"
	cmake.toml
)

add_executable(subposition)

target_sources(subposition PRIVATE ${subposition_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${subposition_SOURCES})

target_compile_features(subposition PRIVATE
	cxx_std_20
)

target_link_libraries(subposition PRIVATE
	IsoRender
	libzip::zip
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT subposition)
endif()
